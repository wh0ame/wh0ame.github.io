{"ast":null,"code":"export default function IpotekaCode(){const CREDIT_MIN=0;// минимально возможный кредит\nconst CREDIT_MAX=50000000;// максимально возможный кредит\nconst CREDIT_DEFAULT=12000000;const CONTRIBUTION_MIN=0;// минимально возможный Первоначальный взнос\nconst CONTRIBUTION_MAX=5000000;// максимально возможный Первоначальный взнос\nconst CONTRIBUTION_DEFAULT=1000000;const RETURN_PERIOD_MIN=1;// минимально возможный срок кредита\nconst RETURN_PERIOD_MAX=35;// максимально возможный срок кредита\nconst RETURN_PERIOD_DEFAULT=20;// Минимально возможная процентная ставка.\nconst PERCENT_NUMBER_MIN=1;// Максимально возможная процентная ставка.\nconst PERCENT_NUMBER_MAX=5;const PERCENT_NUMBER_DEFAULT=2.54;// Стоимость недвижимости\nconst creditText=document.querySelector('#creditText');const creditRange=document.querySelector('#creditRange');// Первоначальный взнос\nconst firstContributionText=document.querySelector('#firstContributionText');const firstContributionRange=document.querySelector('#firstContributionRange');// Срок кредита\nconst returnPeriodText=document.querySelector('#returnPeriodText');const returnPeriodRange=document.querySelector('#returnPeriodRange');// Процентная ставка.\nconst percentNumber=document.querySelector('#percentNumber');const percentNumberRange=document.querySelector('#percentNumberText');// Форматтер числа - Встроенный объект Intl с параметрами форматирования данных.\nconst formatterNumber=new Intl.NumberFormat('ru');// Форматтер валюты.\nconst formatterCurrency=new Intl.NumberFormat('ru',{style:'currency',currency:'RUB',// максимальное количество знаков после запятой\nminimumFractionDigits:0});// Форматтер даты.\nconst formatterDate={format(years){years=parseInt(years);let count=years%10;let txt='лет';if(years>=5&&years<=20){txt='лет';}else{if(count===1){txt='год';}else{if(count>=2&&count<=4){txt='года';}}}return years+' '+txt;}};// Форматтер процентов.\nconst formatterPercent={format(percent){percent=Number(parseFloat(percent).toFixed(2));return\"\".concat(percent,\" %\");}};/*\n\tПорядок событий:\n\tfocus -> keydown -> keypress -> input -> keyup\n*/ // Событие \"input\" возникает при смене значения в поле <input>.\n// для инпута \"Стоимость недвижимости\"\nsetDoubleDependencies(creditText,creditRange,formatterNumber,formatterCurrency,CREDIT_MIN,CREDIT_MAX,CREDIT_DEFAULT);// для инпута \"Первоначальный взнос\"\nsetDoubleDependencies(firstContributionText,firstContributionRange,formatterNumber,formatterCurrency,CONTRIBUTION_MIN,CONTRIBUTION_MAX,CONTRIBUTION_DEFAULT);// для инпута \"Срок кредита\"\nsetDoubleDependencies(returnPeriodText,returnPeriodRange,formatterNumber,formatterDate,RETURN_PERIOD_MIN,RETURN_PERIOD_MAX,RETURN_PERIOD_DEFAULT);// для инпута \"Процентная ставка\"\nsetDoubleDependencies(percentNumber,formatterNumber,formatterPercent,PERCENT_NUMBER_MIN,PERCENT_NUMBER_MAX,PERCENT_NUMBER_DEFAULT);setReaction(creditText,creditRange,firstContributionText,firstContributionRange,returnPeriodText,returnPeriodRange,percentNumber,mainProcess);mainProcess();/*\n\tФункция принимает аргументы\n\t(над какими элементами будет двойная зависимость,\n\tФорматтер который определяет какой будет формат,\n\tЦелевой форматтер,\n\tминимальное и максимальное значения инпута)\n*/function setDoubleDependencies(textElement,rangeElement,formatterNumber,formatterGoal,min,max,middle){// Среднее арифметическое min и max значений input'ов.\n// const middle = (min + max) / 2\n// Установить атрибуты min и max ползункам:\nrangeElement.setAttribute('min',min);rangeElement.setAttribute('max',max);// Установить значение ползунка по умолчанию:\nrangeElement.value=middle;// Установить значение input'а по умолчанию:\ntextElement.value=formatterGoal.format(middle);// Добавить обработчик события \"focus\" инпуту.\ntextElement.addEventListener('focus',function(event){/*\n\t\t\tthis - контекст. Ссылается на тот самый элемент,\n\t\t\tвнутри которого произошло событие.\n\t\t*/ // Достать из строки только числа:\nlet number='';for(const letter of this.value){if('0123456789.,'.includes(letter)){number+=letter;}}// Превратить строку number в число.\nnumber=Number(parseFloat(number).toFixed(2));// value хранит в себе значение input'а.\n// Установить значением текущего элемента только число (без знака валюты).\nthis.value=formatterNumber.format(number);});// Добавить обработчик события \"input\" инпуту.\ntextElement.addEventListener('input',function inputHandler(event){/*\n\t\t\tthis - контекст. Ссылается на тот самый элемент,\n\t\t\tвнутри которого произошло событие.\n\t\t*/ // value хранит в себе значение input'а.\n// Достать из строки только числа:\nlet number='';for(const letter of this.value){if('0123456789.,'.includes(letter)){number+=letter;}}// Превратить строку number в число.\nnumber=Number(parseFloat(number).toFixed(2));/*\n\t\t\tЗначение поля должно быть не менее минимального\n\t\t\tи не более максимально возможного.\n\t\t*/if(number<min){number=min;}if(number>max){number=max;}/*\n\t\t\tДобавить изменение значения ползунка\n\t\t\tпри изменении значения выбранного элемента.\n\t\t*/rangeElement.value=number;number=formatterNumber.format(number);// Записать в input отформатированное число.\nthis.value=number;});// Добавить обработчик события \"blur\" инпуту.\ntextElement.addEventListener('blur',function(event){/*\n\t\t\tthis - контекст. Ссылается на тот самый элемент,\n\t\t\tвнутри которого произошло событие.\n\t\t*/ // Достать из строки только числа:\nlet number='';for(const letter of this.value){if('0123456789.,'.includes(letter)){number+=letter;}}number=number.replace(',','.');// Превратить строку number в число.\nnumber=Number(parseFloat(number).toFixed(2));// value хранит в себе значение input'а.\nthis.value=formatterGoal.format(number);});// Добавить обработчик события \"input\" инпуту-ползунку.\nrangeElement.addEventListener('input',function(event){// Присвоим значение ползунка инпуту.\ntextElement.value=formatterGoal.format(Number(parseFloat(this.value).toFixed(2)));});}/*\n\tФункция присвоит обработчик события нескольким элементам сразу.\n\tОбработчик события передаётся последним аргументом.\n*/function setReaction(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}const handler=args.splice(-1)[0];/*\n\t\tПройти по всем элементам массива args\n\t\tи повесить им на событие 'input' обработчик handler.\n\t*/for(const element of args){element.addEventListener('input',function(event){handler.call(this,event,args.slice());});}}// Функция рассчитывает суммы выплат.\nfunction mainProcess(){const credit=parseInt(creditRange.value);const firstContribution=parseInt(firstContributionRange.value);const returnPeriod=parseInt(returnPeriodRange.value)*12;const percent=Number(parseFloat(percentNumberRange.value).toFixed(2))/100/12;// Рассчитать и присвоить значение элементу \"Итого: в месяц\".\nconst x=Math.pow(1+percent,returnPeriod);const payment=(credit-firstContribution)*x*percent/(x-1);document.querySelector('#payment').textContent=formatterCurrency.format(payment);// Рассчитать и присвоить значение элементу \"Общая выплата\".\nconst common=(payment*returnPeriod).toFixed(2);document.querySelector('#common').textContent=formatterCurrency.format(common);// Рассчитать и присвоить значение элементу \"Переплата\".\nconst subpayment=common-(credit-firstContribution);document.querySelector('#subpayment').textContent=formatterCurrency.format(subpayment);// Finally, chart loan balance, and interest and equity payments\nchart(credit-firstContribution,percent,payment,returnPeriod);}// Chart monthly loan balance, interest and equity in an HTML <canvas> element.\n// If called with no arguments then just erase any previously drawn chart.\nfunction chart(principal,interest,monthly,payments){const graph=document.getElementById(\"graph\");// Get the <canvas> tag\ngraph.width=graph.width;// Magic to clear and reset the canvas element\n// If we're called with no arguments, or if this browser does not support\n// graphics in a <canvas> element, then just return now.\nif(arguments.length===0||!graph.getContext)return;// Get the \"context\" object for the <canvas> that defines the drawing API\nconst g=graph.getContext(\"2d\");// All drawing is done with this object\nconst width=graph.width,height=graph.height;// Get canvas size\n// These functions convert payment numbers and dollar amounts to pixels\nfunction paymentToX(n){return n*width/payments;}function amountToY(a){return height-a*height/(monthly*payments*1.05);}// Payments are a straight line from (0,0) to (payments, monthly*payments)\ng.moveTo(paymentToX(0),amountToY(0));// Start at lower left\ng.lineTo(paymentToX(payments),// Draw to upper right\namountToY(monthly*payments));g.lineTo(paymentToX(payments),amountToY(0));// Down to lower right\ng.closePath();// And back to start\ng.fillStyle=\"#f88\";// Light red\ng.fill();// Fill the triangle\ng.font=\"bold 12px sans-serif\";// Define a font\ng.fillText(\"Общая выплата\",20,20);// Draw text in legend\n// Cumulative equity is non-linear and trickier to chart\nlet equity=0;g.beginPath();// Begin a new shape\ng.moveTo(paymentToX(0),amountToY(0));// starting at lower-left\nfor(let p=1;p<=payments;p++){// For each payment, figure out how much is interest\nconst thisMonthsInterest=(principal-equity)*interest;equity+=monthly-thisMonthsInterest;// The rest goes to equity\ng.lineTo(paymentToX(p),amountToY(equity));// Line to this point\n}g.lineTo(paymentToX(payments),amountToY(0));// Line back to X axis\ng.closePath();// And back to start point\ng.fillStyle=\"green\";// Now use green paint\ng.fill();// And fill area under curve\ng.fillText(\"Сумма кредита\",20,35);// Label it in green\n// Loop again, as above, but chart loan balance as a thick black line\nlet bal=principal;g.beginPath();g.moveTo(paymentToX(0),amountToY(bal));for(let p=1;p<=payments;p++){const thisMonthsInterest=bal*interest;bal-=monthly-thisMonthsInterest;// The rest goes to equity\ng.lineTo(paymentToX(p),amountToY(bal));// Draw line to this point\n}g.lineWidth=3;// Use a thick line\ng.stroke();// Draw the balance curve\ng.fillStyle=\"black\";// Switch to black text\ng.fillText(\"Остаток кредита\",20,50);// Legend entry\n// Now make yearly tick marks and year numbers on X axis\ng.textAlign=\"center\";// Center text over ticks\nconst y=amountToY(0);// Y coordinate of X axis\nfor(let year=1;year*12<=payments;year++){// For each year\nconst x=paymentToX(year*12);// Compute tick position\ng.fillRect(x-0.5,y-3,1,3);// Draw the tick\nif(year===1)g.fillText(\"Year\",x,y-5);// Label the axis\nif(year%5===0&&year*12!==payments)// Number every 5 years\ng.fillText(String(year),x,y-5);}// Mark payment amounts along the right edge\ng.textAlign=\"right\";// Right-justify text\ng.textBaseline=\"middle\";// Center it vertically\nconst ticks=[monthly*payments,principal];// The two points we'll mark\nconst rightEdge=paymentToX(payments);// X coordinate of Y axis\nfor(let i=0;i<ticks.length;i++){// For each of the 2 points\nconst y=amountToY(ticks[i]);// Compute Y position of tick\ng.fillRect(rightEdge-3,y-0.5,3,1);// Draw the tick mark\ng.fillText(String(ticks[i].toFixed(0)),// And label it.\nrightEdge-5,y);}}}","map":{"version":3,"names":["IpotekaCode","CREDIT_MIN","CREDIT_MAX","CREDIT_DEFAULT","CONTRIBUTION_MIN","CONTRIBUTION_MAX","CONTRIBUTION_DEFAULT","RETURN_PERIOD_MIN","RETURN_PERIOD_MAX","RETURN_PERIOD_DEFAULT","PERCENT_NUMBER_MIN","PERCENT_NUMBER_MAX","PERCENT_NUMBER_DEFAULT","creditText","document","querySelector","creditRange","firstContributionText","firstContributionRange","returnPeriodText","returnPeriodRange","percentNumber","percentNumberRange","formatterNumber","Intl","NumberFormat","formatterCurrency","style","currency","minimumFractionDigits","formatterDate","format","years","parseInt","count","txt","formatterPercent","percent","Number","parseFloat","toFixed","concat","setDoubleDependencies","setReaction","mainProcess","textElement","rangeElement","formatterGoal","min","max","middle","setAttribute","value","addEventListener","event","number","letter","includes","inputHandler","replace","_len","arguments","length","args","Array","_key","handler","splice","element","call","slice","credit","firstContribution","returnPeriod","x","Math","pow","payment","textContent","common","subpayment","chart","principal","interest","monthly","payments","graph","getElementById","width","getContext","g","height","paymentToX","n","amountToY","a","moveTo","lineTo","closePath","fillStyle","fill","font","fillText","equity","beginPath","p","thisMonthsInterest","bal","lineWidth","stroke","textAlign","y","year","fillRect","String","textBaseline","ticks","rightEdge","i"],"sources":["C:/Users/Ivan/Desktop/Deplom-master/src/Ipoteka/IpotekaCode.js"],"sourcesContent":["export default function IpotekaCode(){\n    const CREDIT_MIN = 0 // минимально возможный кредит\nconst CREDIT_MAX = 50000000 // максимально возможный кредит\nconst CREDIT_DEFAULT = 12000000\n\nconst CONTRIBUTION_MIN = 0 // минимально возможный Первоначальный взнос\nconst CONTRIBUTION_MAX = 5000000 // максимально возможный Первоначальный взнос\nconst CONTRIBUTION_DEFAULT = 1000000\n\nconst RETURN_PERIOD_MIN = 1 // минимально возможный срок кредита\nconst RETURN_PERIOD_MAX = 35 // максимально возможный срок кредита\nconst RETURN_PERIOD_DEFAULT = 20\n\n// Минимально возможная процентная ставка.\nconst PERCENT_NUMBER_MIN = 1\n// Максимально возможная процентная ставка.\nconst PERCENT_NUMBER_MAX = 5\nconst PERCENT_NUMBER_DEFAULT = 2.54\n\n// Стоимость недвижимости\nconst creditText = document.querySelector('#creditText')\nconst creditRange = document.querySelector('#creditRange')\n// Первоначальный взнос\nconst firstContributionText = document.querySelector('#firstContributionText')\nconst firstContributionRange = document.querySelector('#firstContributionRange')\n// Срок кредита\nconst returnPeriodText = document.querySelector('#returnPeriodText')\nconst returnPeriodRange = document.querySelector('#returnPeriodRange')\n// Процентная ставка.\nconst percentNumber = document.querySelector('#percentNumber')\nconst percentNumberRange = document.querySelector('#percentNumberText')\n\n// Форматтер числа - Встроенный объект Intl с параметрами форматирования данных.\nconst formatterNumber = new Intl.NumberFormat('ru')\n\n// Форматтер валюты.\nconst formatterCurrency = new Intl.NumberFormat('ru', {\n\tstyle: 'currency',\n\tcurrency: 'RUB',\n\t// максимальное количество знаков после запятой\n\tminimumFractionDigits: 0\n})\n\n// Форматтер даты.\nconst formatterDate = {\n\tformat (years) {\n\t\tyears = parseInt(years)\n\t\tlet count = years % 10\n\t\tlet txt = 'лет'\n\n\t\tif (years >= 5 && years <= 20) {\n\t\t\ttxt = 'лет'\n\t\t} else {\n\t\t\tif (count === 1) {\n\t\t\t\ttxt = 'год'\n\t\t\t} else {\n\t\t\t\tif (count >= 2 && count <= 4) {\n\t\t\t\t\ttxt = 'года'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn years + ' ' + txt\n\t}\n}\n\n// Форматтер процентов.\nconst formatterPercent = {\n\tformat (percent) {\n\t\tpercent = Number(parseFloat(percent).toFixed(2))\n\n\t\treturn `${percent} %`\n\t}\n}\n\n/*\n\tПорядок событий:\n\tfocus -> keydown -> keypress -> input -> keyup\n*/\n// Событие \"input\" возникает при смене значения в поле <input>.\n\n// для инпута \"Стоимость недвижимости\"\nsetDoubleDependencies(\n\tcreditText,\n\tcreditRange,\n\tformatterNumber,\n\tformatterCurrency,\n\tCREDIT_MIN,\n\tCREDIT_MAX,\n\tCREDIT_DEFAULT,\n)\n\n// для инпута \"Первоначальный взнос\"\nsetDoubleDependencies(\n\tfirstContributionText,\n\tfirstContributionRange,\n\tformatterNumber,\n\tformatterCurrency,\n\tCONTRIBUTION_MIN,\n\tCONTRIBUTION_MAX,\n\tCONTRIBUTION_DEFAULT,\n)\n\n// для инпута \"Срок кредита\"\nsetDoubleDependencies(\n\treturnPeriodText,\n\treturnPeriodRange,\n\tformatterNumber,\n\tformatterDate,\n\tRETURN_PERIOD_MIN,\n\tRETURN_PERIOD_MAX,\n\tRETURN_PERIOD_DEFAULT,\n)\n\n// для инпута \"Процентная ставка\"\nsetDoubleDependencies(\n\tpercentNumber,\n\tformatterNumber,\n\tformatterPercent,\n\tPERCENT_NUMBER_MIN,\n\tPERCENT_NUMBER_MAX,\n\tPERCENT_NUMBER_DEFAULT,\n)\n\nsetReaction(\n\tcreditText,\n\tcreditRange,\n\tfirstContributionText,\n\tfirstContributionRange,\n\treturnPeriodText,\n\treturnPeriodRange,\n\tpercentNumber,\n\tmainProcess\n)\n\nmainProcess()\n\n/*\n\tФункция принимает аргументы\n\t(над какими элементами будет двойная зависимость,\n\tФорматтер который определяет какой будет формат,\n\tЦелевой форматтер,\n\tминимальное и максимальное значения инпута)\n*/\nfunction setDoubleDependencies (\n\ttextElement,\n\trangeElement,\n\tformatterNumber,\n\tformatterGoal,\n\tmin,\n\tmax,\n\tmiddle\n) {\n\t// Среднее арифметическое min и max значений input'ов.\n\t// const middle = (min + max) / 2\n\n\t// Установить атрибуты min и max ползункам:\n\trangeElement.setAttribute('min', min)\n\trangeElement.setAttribute('max', max)\n\t// Установить значение ползунка по умолчанию:\n\trangeElement.value = middle\n\t// Установить значение input'а по умолчанию:\n\ttextElement.value = formatterGoal.format(middle)\n\n\t// Добавить обработчик события \"focus\" инпуту.\n\ttextElement.addEventListener('focus', function (event) {\n\t\t/*\n\t\t\tthis - контекст. Ссылается на тот самый элемент,\n\t\t\tвнутри которого произошло событие.\n\t\t*/\n\t\t// Достать из строки только числа:\n\t\tlet number = ''\n\n\t\tfor (const letter of this.value) {\n\t\t\tif ('0123456789.,'.includes(letter)) {\n\t\t\t\tnumber += letter\n\t\t\t}\n\t\t}\n\n\t\t// Превратить строку number в число.\n\t\tnumber = Number(parseFloat(number).toFixed(2))\n\n\t\t// value хранит в себе значение input'а.\n\t\t// Установить значением текущего элемента только число (без знака валюты).\n\t\tthis.value = formatterNumber.format(number)\n\t})\n\n\t// Добавить обработчик события \"input\" инпуту.\n\ttextElement.addEventListener('input', function inputHandler (event) {\n\t\t/*\n\t\t\tthis - контекст. Ссылается на тот самый элемент,\n\t\t\tвнутри которого произошло событие.\n\t\t*/\n\t\t// value хранит в себе значение input'а.\n\n\t\t// Достать из строки только числа:\n\t\tlet number = ''\n\n\t\tfor (const letter of this.value) {\n\t\t\tif ('0123456789.,'.includes(letter)) {\n\t\t\t\tnumber += letter\n\t\t\t}\n\t\t}\n\n\t\t// Превратить строку number в число.\n\t\tnumber = Number(parseFloat(number).toFixed(2))\n\n\t\t/*\n\t\t\tЗначение поля должно быть не менее минимального\n\t\t\tи не более максимально возможного.\n\t\t*/\n\t\tif (number < min) {\n\t\t\tnumber = min\n\t\t}\n\n\t\tif (number > max) {\n\t\t\tnumber = max\n\t\t}\n\n\t\t/*\n\t\t\tДобавить изменение значения ползунка\n\t\t\tпри изменении значения выбранного элемента.\n\t\t*/\n\t\trangeElement.value = number\n\n\t\tnumber = formatterNumber.format(number)\n\t\t// Записать в input отформатированное число.\n\t\tthis.value = number\n\t})\n\n\t// Добавить обработчик события \"blur\" инпуту.\n\ttextElement.addEventListener('blur', function (event) {\n\t\t/*\n\t\t\tthis - контекст. Ссылается на тот самый элемент,\n\t\t\tвнутри которого произошло событие.\n\t\t*/\n\t\t// Достать из строки только числа:\n\t\tlet number = ''\n\n\t\tfor (const letter of this.value) {\n\t\t\tif ('0123456789.,'.includes(letter)) {\n\t\t\t\tnumber += letter\n\t\t\t}\n\t\t}\n\t\tnumber = number.replace(',', '.')\n\n\t\t// Превратить строку number в число.\n\t\tnumber = Number(parseFloat(number).toFixed(2))\n\n\t\t// value хранит в себе значение input'а.\n\t\tthis.value = formatterGoal.format(number)\n\t})\n\n\t// Добавить обработчик события \"input\" инпуту-ползунку.\n\trangeElement.addEventListener('input', function (event) {\n\t\t// Присвоим значение ползунка инпуту.\n\t\ttextElement.value = formatterGoal\n\t\t\t.format(Number(parseFloat(this.value).toFixed(2)))\n\t})\n}\n\n/*\n\tФункция присвоит обработчик события нескольким элементам сразу.\n\tОбработчик события передаётся последним аргументом.\n*/\nfunction setReaction (...args) {\n\tconst handler = args.splice(-1)[0]\n\t/*\n\t\tПройти по всем элементам массива args\n\t\tи повесить им на событие 'input' обработчик handler.\n\t*/\n\tfor (const element of args) {\n\t\telement.addEventListener('input', function (event) {\n\t\t\thandler.call(this, event, args.slice())\n\t\t})\n\t}\n}\n\n// Функция рассчитывает суммы выплат.\nfunction mainProcess () {\n\tconst credit = parseInt(creditRange.value)\n\tconst firstContribution = parseInt(firstContributionRange.value)\n\tconst returnPeriod = parseInt(returnPeriodRange.value) * 12\n\tconst percent = Number(parseFloat(percentNumberRange.value)\n\t\t.toFixed(2)) / 100 / 12\n\n\t// Рассчитать и присвоить значение элементу \"Итого: в месяц\".\n\tconst x = Math.pow(1 + percent, returnPeriod)\n\tconst payment = ((credit - firstContribution) * x * percent) / (x - 1)\n\tdocument.querySelector('#payment')\n\t\t.textContent = formatterCurrency.format(payment)\n\n\t// Рассчитать и присвоить значение элементу \"Общая выплата\".\n\tconst common = (payment * returnPeriod).toFixed(2)\n\tdocument.querySelector('#common')\n\t\t.textContent = formatterCurrency.format(common)\n\n\t// Рассчитать и присвоить значение элементу \"Переплата\".\n\tconst subpayment = common - (credit - firstContribution)\n\tdocument.querySelector('#subpayment')\n\t\t.textContent = formatterCurrency.format(subpayment)\n\n\t// Finally, chart loan balance, and interest and equity payments\n\tchart(credit - firstContribution, percent, payment, returnPeriod)\n}\n\n// Chart monthly loan balance, interest and equity in an HTML <canvas> element.\n// If called with no arguments then just erase any previously drawn chart.\nfunction chart(principal, interest, monthly, payments) {\n\tconst graph = document.getElementById(\"graph\"); // Get the <canvas> tag\n\tgraph.width = graph.width;  // Magic to clear and reset the canvas element\n\n\t// If we're called with no arguments, or if this browser does not support\n\t// graphics in a <canvas> element, then just return now.\n\tif (arguments.length === 0 || !graph.getContext) return;\n\n\t// Get the \"context\" object for the <canvas> that defines the drawing API\n\tconst g = graph.getContext(\"2d\"); // All drawing is done with this object\n\tconst width = graph.width, height = graph.height; // Get canvas size\n\n\t// These functions convert payment numbers and dollar amounts to pixels\n\tfunction paymentToX(n) { return n * width/payments; }\n\tfunction amountToY(a) { return height-(a * height/(monthly*payments*1.05));}\n\n\t// Payments are a straight line from (0,0) to (payments, monthly*payments)\n\tg.moveTo(paymentToX(0), amountToY(0));         // Start at lower left\n\tg.lineTo(paymentToX(payments),                 // Draw to upper right\n\t\t\t amountToY(monthly*payments));\n\tg.lineTo(paymentToX(payments), amountToY(0));  // Down to lower right\n\tg.closePath();                                 // And back to start\n\tg.fillStyle = \"#f88\";                          // Light red\n\tg.fill();                                      // Fill the triangle\n\tg.font = \"bold 12px sans-serif\";               // Define a font\n\tg.fillText(\"Общая выплата\", 20,20);  // Draw text in legend\n\n\t// Cumulative equity is non-linear and trickier to chart\n\tlet equity = 0;\n\tg.beginPath();                                 // Begin a new shape\n\tg.moveTo(paymentToX(0), amountToY(0));         // starting at lower-left\n\tfor(let p = 1; p <= payments; p++) {\n\t\t// For each payment, figure out how much is interest\n\t\tconst thisMonthsInterest = (principal-equity)*interest;\n\t\tequity += (monthly - thisMonthsInterest);  // The rest goes to equity\n\t\tg.lineTo(paymentToX(p),amountToY(equity)); // Line to this point\n\t}\n\tg.lineTo(paymentToX(payments), amountToY(0));  // Line back to X axis\n\tg.closePath();                                 // And back to start point\n\tg.fillStyle = \"green\";                         // Now use green paint\n\tg.fill();                                      // And fill area under curve\n\tg.fillText(\"Сумма кредита\", 20,35);             // Label it in green\n\n\t// Loop again, as above, but chart loan balance as a thick black line\n\tlet bal = principal;\n\tg.beginPath();\n\tg.moveTo(paymentToX(0),amountToY(bal));\n\tfor(let p = 1; p <= payments; p++) {\n\t\tconst thisMonthsInterest = bal*interest;\n\t\tbal -= (monthly - thisMonthsInterest);     // The rest goes to equity\n\t\tg.lineTo(paymentToX(p),amountToY(bal));    // Draw line to this point\n\t}\n\tg.lineWidth = 3;                               // Use a thick line\n\tg.stroke();                                    // Draw the balance curve\n\tg.fillStyle = \"black\";                         // Switch to black text\n\tg.fillText(\"Остаток кредита\", 20,50);             // Legend entry\n\n\t// Now make yearly tick marks and year numbers on X axis\n\tg.textAlign=\"center\";                          // Center text over ticks\n\tconst y = amountToY(0);                          // Y coordinate of X axis\n\tfor(let year=1; year*12 <= payments; year++) { // For each year\n\t\tconst x = paymentToX(year*12);               // Compute tick position\n\t\tg.fillRect(x-0.5,y-3,1,3);                 // Draw the tick\n\t\tif (year === 1) g.fillText(\"Year\", x, y-5); // Label the axis\n\t\tif (year % 5 === 0 && year*12 !== payments) // Number every 5 years\n\t\t\tg.fillText(String(year), x, y-5);\n\t}\n\n\t// Mark payment amounts along the right edge\n\tg.textAlign = \"right\";                         // Right-justify text\n\tg.textBaseline = \"middle\";                     // Center it vertically\n\tconst ticks = [monthly*payments, principal];     // The two points we'll mark\n\tconst rightEdge = paymentToX(payments);          // X coordinate of Y axis\n\tfor(let i = 0; i < ticks.length; i++) {        // For each of the 2 points\n\t\tconst y = amountToY(ticks[i]);               // Compute Y position of tick\n\t\tg.fillRect(rightEdge-3, y-0.5, 3,1);       // Draw the tick mark\n\t\tg.fillText(String(ticks[i].toFixed(0)),    // And label it.\n\t\t\t\t\trightEdge-5, y);\n\t}\n}\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}