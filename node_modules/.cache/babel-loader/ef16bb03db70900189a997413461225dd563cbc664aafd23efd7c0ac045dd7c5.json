{"ast":null,"code":"export default function IpotekaCode() {\n  const CREDIT_MIN = 0; // минимально возможный кредит\n  const CREDIT_MAX = 50000000; // максимально возможный кредит\n  const CREDIT_DEFAULT = 12000000;\n  const CONTRIBUTION_MIN = 0; // минимально возможный Первоначальный взнос\n  const CONTRIBUTION_MAX = 5000000; // максимально возможный Первоначальный взнос\n  const CONTRIBUTION_DEFAULT = 1000000;\n  const RETURN_PERIOD_MIN = 1; // минимально возможный срок кредита\n  const RETURN_PERIOD_MAX = 35; // максимально возможный срок кредита\n  const RETURN_PERIOD_DEFAULT = 20;\n\n  // Минимально возможная процентная ставка.\n  const PERCENT_NUMBER_MIN = 1;\n  // Максимально возможная процентная ставка.\n  const PERCENT_NUMBER_MAX = 5;\n  const PERCENT_NUMBER_DEFAULT = 2.54;\n\n  // Стоимость недвижимости\n  const creditText = document.querySelector('#creditText');\n  const creditRange = document.querySelector('#creditRange');\n  // Первоначальный взнос\n  const firstContributionText = document.querySelector('#firstContributionText');\n  const firstContributionRange = document.querySelector('#firstContributionRange');\n  // Срок кредита\n  const returnPeriodText = document.querySelector('#returnPeriodText');\n  const returnPeriodRange = document.querySelector('#returnPeriodRange');\n  // Процентная ставка.\n  const percentNumber = document.querySelector('#percentNumber');\n  const percentNumberRange = document.querySelector('#percentNumberText');\n\n  // Форматтер числа - Встроенный объект Intl с параметрами форматирования данных.\n  const formatterNumber = new Intl.NumberFormat('ru');\n\n  // Форматтер валюты.\n  const formatterCurrency = new Intl.NumberFormat('ru', {\n    style: 'currency',\n    currency: 'RUB',\n    // максимальное количество знаков после запятой\n    minimumFractionDigits: 0\n  });\n\n  // Форматтер даты.\n  const formatterDate = {\n    format(years) {\n      years = parseInt(years);\n      let count = years % 10;\n      let txt = 'лет';\n      if (years >= 5 && years <= 20) {\n        txt = 'лет';\n      } else {\n        if (count === 1) {\n          txt = 'год';\n        } else {\n          if (count >= 2 && count <= 4) {\n            txt = 'года';\n          }\n        }\n      }\n      return years + ' ' + txt;\n    }\n  };\n\n  // Форматтер процентов.\n  const formatterPercent = {\n    format(percent) {\n      percent = Number(parseFloat(percent).toFixed(2));\n      return `${percent} %`;\n    }\n  };\n\n  /*\n  \tПорядок событий:\n  \tfocus -> keydown -> keypress -> input -> keyup\n  */\n  // Событие \"input\" возникает при смене значения в поле <input>.\n\n  // для инпута \"Стоимость недвижимости\"\n  setDoubleDependencies(creditText, creditRange, formatterNumber, formatterCurrency, CREDIT_MIN, CREDIT_MAX, CREDIT_DEFAULT);\n\n  // для инпута \"Первоначальный взнос\"\n  setDoubleDependencies(firstContributionText, firstContributionRange, formatterNumber, formatterCurrency, CONTRIBUTION_MIN, CONTRIBUTION_MAX, CONTRIBUTION_DEFAULT);\n\n  // для инпута \"Срок кредита\"\n  setDoubleDependencies(returnPeriodText, returnPeriodRange, formatterNumber, formatterDate, RETURN_PERIOD_MIN, RETURN_PERIOD_MAX, RETURN_PERIOD_DEFAULT);\n\n  // для инпута \"Процентная ставка\"\n  setDoubleDependencies(percentNumber, formatterNumber, formatterPercent, PERCENT_NUMBER_MIN, PERCENT_NUMBER_MAX, PERCENT_NUMBER_DEFAULT);\n  setReaction(creditText, creditRange, firstContributionText, firstContributionRange, returnPeriodText, returnPeriodRange, percentNumber, mainProcess);\n  mainProcess();\n\n  /*\n  \tФункция принимает аргументы\n  \t(над какими элементами будет двойная зависимость,\n  \tФорматтер который определяет какой будет формат,\n  \tЦелевой форматтер,\n  \tминимальное и максимальное значения инпута)\n  */\n  function setDoubleDependencies(textElement, rangeElement, formatterNumber, formatterGoal, min, max, middle) {\n    // Среднее арифметическое min и max значений input'ов.\n    // const middle = (min + max) / 2\n\n    // Установить атрибуты min и max ползункам:\n    rangeElement.setAttribute('min', min);\n    rangeElement.setAttribute('max', max);\n    // Установить значение ползунка по умолчанию:\n    rangeElement.value = middle;\n    // Установить значение input'а по умолчанию:\n    textElement.value = formatterGoal.format(middle);\n\n    // Добавить обработчик события \"focus\" инпуту.\n    textElement.addEventListener('focus', function (event) {\n      /*\n      \tthis - контекст. Ссылается на тот самый элемент,\n      \tвнутри которого произошло событие.\n      */\n      // Достать из строки только числа:\n      let number = '';\n      for (const letter of this.value) {\n        if ('0123456789.,'.includes(letter)) {\n          number += letter;\n        }\n      }\n\n      // Превратить строку number в число.\n      number = Number(parseFloat(number).toFixed(2));\n\n      // value хранит в себе значение input'а.\n      // Установить значением текущего элемента только число (без знака валюты).\n      this.value = formatterNumber.format(number);\n    });\n\n    // Добавить обработчик события \"input\" инпуту.\n    textElement.addEventListener('input', function inputHandler(event) {\n      /*\n      \tthis - контекст. Ссылается на тот самый элемент,\n      \tвнутри которого произошло событие.\n      */\n      // value хранит в себе значение input'а.\n\n      // Достать из строки только числа:\n      let number = '';\n      for (const letter of this.value) {\n        if ('0123456789.,'.includes(letter)) {\n          number += letter;\n        }\n      }\n\n      // Превратить строку number в число.\n      number = Number(parseFloat(number).toFixed(2));\n\n      /*\n      \tЗначение поля должно быть не менее минимального\n      \tи не более максимально возможного.\n      */\n      if (number < min) {\n        number = min;\n      }\n      if (number > max) {\n        number = max;\n      }\n\n      /*\n      \tДобавить изменение значения ползунка\n      \tпри изменении значения выбранного элемента.\n      */\n      rangeElement.value = number;\n      number = formatterNumber.format(number);\n      // Записать в input отформатированное число.\n      this.value = number;\n    });\n\n    // Добавить обработчик события \"blur\" инпуту.\n    textElement.addEventListener('blur', function (event) {\n      /*\n      \tthis - контекст. Ссылается на тот самый элемент,\n      \tвнутри которого произошло событие.\n      */\n      // Достать из строки только числа:\n      let number = '';\n      for (const letter of this.value) {\n        if ('0123456789.,'.includes(letter)) {\n          number += letter;\n        }\n      }\n      number = number.replace(',', '.');\n\n      // Превратить строку number в число.\n      number = Number(parseFloat(number).toFixed(2));\n\n      // value хранит в себе значение input'а.\n      this.value = formatterGoal.format(number);\n    });\n\n    // Добавить обработчик события \"input\" инпуту-ползунку.\n    rangeElement.addEventListener('input', function (event) {\n      // Присвоим значение ползунка инпуту.\n      textElement.value = formatterGoal.format(Number(parseFloat(this.value).toFixed(2)));\n    });\n  }\n\n  /*\n  \tФункция присвоит обработчик события нескольким элементам сразу.\n  \tОбработчик события передаётся последним аргументом.\n  */\n  function setReaction(...args) {\n    const handler = args.splice(-1)[0];\n    /*\n    \tПройти по всем элементам массива args\n    \tи повесить им на событие 'input' обработчик handler.\n    */\n    for (const element of args) {\n      element.addEventListener('input', function (event) {\n        handler.call(this, event, args.slice());\n      });\n    }\n  }\n\n  // Функция рассчитывает суммы выплат.\n  function mainProcess() {\n    const credit = parseInt(creditRange.value);\n    const firstContribution = parseInt(firstContributionRange.value);\n    const returnPeriod = parseInt(returnPeriodRange.value) * 12;\n    const percent = Number(parseFloat(percentNumberRange.value).toFixed(2)) / 100 / 12;\n\n    // Рассчитать и присвоить значение элементу \"Итого: в месяц\".\n    const x = Math.pow(1 + percent, returnPeriod);\n    const payment = (credit - firstContribution) * x * percent / (x - 1);\n    document.querySelector('#payment').textContent = formatterCurrency.format(payment);\n\n    // Рассчитать и присвоить значение элементу \"Общая выплата\".\n    const common = (payment * returnPeriod).toFixed(2);\n    document.querySelector('#common').textContent = formatterCurrency.format(common);\n\n    // Рассчитать и присвоить значение элементу \"Переплата\".\n    const subpayment = common - (credit - firstContribution);\n    document.querySelector('#subpayment').textContent = formatterCurrency.format(subpayment);\n\n    // Finally, chart loan balance, and interest and equity payments\n    chart(credit - firstContribution, percent, payment, returnPeriod);\n  }\n\n  // Chart monthly loan balance, interest and equity in an HTML <canvas> element.\n  // If called with no arguments then just erase any previously drawn chart.\n  function chart(principal, interest, monthly, payments) {\n    const graph = document.getElementById(\"graph\"); // Get the <canvas> tag\n    graph.width = graph.width; // Magic to clear and reset the canvas element\n\n    // If we're called with no arguments, or if this browser does not support\n    // graphics in a <canvas> element, then just return now.\n    if (arguments.length === 0 || !graph.getContext) return;\n\n    // Get the \"context\" object for the <canvas> that defines the drawing API\n    const g = graph.getContext(\"2d\"); // All drawing is done with this object\n    const width = graph.width,\n      height = graph.height; // Get canvas size\n\n    // These functions convert payment numbers and dollar amounts to pixels\n    function paymentToX(n) {\n      return n * width / payments;\n    }\n    function amountToY(a) {\n      return height - a * height / (monthly * payments * 1.05);\n    }\n\n    // Payments are a straight line from (0,0) to (payments, monthly*payments)\n    g.moveTo(paymentToX(0), amountToY(0)); // Start at lower left\n    g.lineTo(paymentToX(payments),\n    // Draw to upper right\n    amountToY(monthly * payments));\n    g.lineTo(paymentToX(payments), amountToY(0)); // Down to lower right\n    g.closePath(); // And back to start\n    g.fillStyle = \"#f88\"; // Light red\n    g.fill(); // Fill the triangle\n    g.font = \"bold 12px sans-serif\"; // Define a font\n    g.fillText(\"Общая выплата\", 20, 20); // Draw text in legend\n\n    // Cumulative equity is non-linear and trickier to chart\n    let equity = 0;\n    g.beginPath(); // Begin a new shape\n    g.moveTo(paymentToX(0), amountToY(0)); // starting at lower-left\n    for (let p = 1; p <= payments; p++) {\n      // For each payment, figure out how much is interest\n      const thisMonthsInterest = (principal - equity) * interest;\n      equity += monthly - thisMonthsInterest; // The rest goes to equity\n      g.lineTo(paymentToX(p), amountToY(equity)); // Line to this point\n    }\n    g.lineTo(paymentToX(payments), amountToY(0)); // Line back to X axis\n    g.closePath(); // And back to start point\n    g.fillStyle = \"green\"; // Now use green paint\n    g.fill(); // And fill area under curve\n    g.fillText(\"Сумма кредита\", 20, 35); // Label it in green\n\n    // Loop again, as above, but chart loan balance as a thick black line\n    let bal = principal;\n    g.beginPath();\n    g.moveTo(paymentToX(0), amountToY(bal));\n    for (let p = 1; p <= payments; p++) {\n      const thisMonthsInterest = bal * interest;\n      bal -= monthly - thisMonthsInterest; // The rest goes to equity\n      g.lineTo(paymentToX(p), amountToY(bal)); // Draw line to this point\n    }\n    g.lineWidth = 3; // Use a thick line\n    g.stroke(); // Draw the balance curve\n    g.fillStyle = \"black\"; // Switch to black text\n    g.fillText(\"Остаток кредита\", 20, 50); // Legend entry\n\n    // Now make yearly tick marks and year numbers on X axis\n    g.textAlign = \"center\"; // Center text over ticks\n    const y = amountToY(0); // Y coordinate of X axis\n    for (let year = 1; year * 12 <= payments; year++) {\n      // For each year\n      const x = paymentToX(year * 12); // Compute tick position\n      g.fillRect(x - 0.5, y - 3, 1, 3); // Draw the tick\n      if (year === 1) g.fillText(\"Year\", x, y - 5); // Label the axis\n      if (year % 5 === 0 && year * 12 !== payments)\n        // Number every 5 years\n        g.fillText(String(year), x, y - 5);\n    }\n\n    // Mark payment amounts along the right edge\n    g.textAlign = \"right\"; // Right-justify text\n    g.textBaseline = \"middle\"; // Center it vertically\n    const ticks = [monthly * payments, principal]; // The two points we'll mark\n    const rightEdge = paymentToX(payments); // X coordinate of Y axis\n    for (let i = 0; i < ticks.length; i++) {\n      // For each of the 2 points\n      const y = amountToY(ticks[i]); // Compute Y position of tick\n      g.fillRect(rightEdge - 3, y - 0.5, 3, 1); // Draw the tick mark\n      g.fillText(String(ticks[i].toFixed(0)),\n      // And label it.\n      rightEdge - 5, y);\n    }\n  }\n}\n_c = IpotekaCode;\nvar _c;\n$RefreshReg$(_c, \"IpotekaCode\");","map":{"version":3,"names":["IpotekaCode","CREDIT_MIN","CREDIT_MAX","CREDIT_DEFAULT","CONTRIBUTION_MIN","CONTRIBUTION_MAX","CONTRIBUTION_DEFAULT","RETURN_PERIOD_MIN","RETURN_PERIOD_MAX","RETURN_PERIOD_DEFAULT","PERCENT_NUMBER_MIN","PERCENT_NUMBER_MAX","PERCENT_NUMBER_DEFAULT","creditText","document","querySelector","creditRange","firstContributionText","firstContributionRange","returnPeriodText","returnPeriodRange","percentNumber","percentNumberRange","formatterNumber","Intl","NumberFormat","formatterCurrency","style","currency","minimumFractionDigits","formatterDate","format","years","parseInt","count","txt","formatterPercent","percent","Number","parseFloat","toFixed","setDoubleDependencies","setReaction","mainProcess","textElement","rangeElement","formatterGoal","min","max","middle","setAttribute","value","addEventListener","event","number","letter","includes","inputHandler","replace","args","handler","splice","element","call","slice","credit","firstContribution","returnPeriod","x","Math","pow","payment","textContent","common","subpayment","chart","principal","interest","monthly","payments","graph","getElementById","width","arguments","length","getContext","g","height","paymentToX","n","amountToY","a","moveTo","lineTo","closePath","fillStyle","fill","font","fillText","equity","beginPath","p","thisMonthsInterest","bal","lineWidth","stroke","textAlign","y","year","fillRect","String","textBaseline","ticks","rightEdge","i","_c","$RefreshReg$"],"sources":["C:/Users/Ivan/Desktop/Deplom-master/src/Ipoteka/IpotekaCode.js"],"sourcesContent":["export default function IpotekaCode(){\n    const CREDIT_MIN = 0 // минимально возможный кредит\nconst CREDIT_MAX = 50000000 // максимально возможный кредит\nconst CREDIT_DEFAULT = 12000000\n\nconst CONTRIBUTION_MIN = 0 // минимально возможный Первоначальный взнос\nconst CONTRIBUTION_MAX = 5000000 // максимально возможный Первоначальный взнос\nconst CONTRIBUTION_DEFAULT = 1000000\n\nconst RETURN_PERIOD_MIN = 1 // минимально возможный срок кредита\nconst RETURN_PERIOD_MAX = 35 // максимально возможный срок кредита\nconst RETURN_PERIOD_DEFAULT = 20\n\n// Минимально возможная процентная ставка.\nconst PERCENT_NUMBER_MIN = 1\n// Максимально возможная процентная ставка.\nconst PERCENT_NUMBER_MAX = 5\nconst PERCENT_NUMBER_DEFAULT = 2.54\n\n// Стоимость недвижимости\nconst creditText = document.querySelector('#creditText')\nconst creditRange = document.querySelector('#creditRange')\n// Первоначальный взнос\nconst firstContributionText = document.querySelector('#firstContributionText')\nconst firstContributionRange = document.querySelector('#firstContributionRange')\n// Срок кредита\nconst returnPeriodText = document.querySelector('#returnPeriodText')\nconst returnPeriodRange = document.querySelector('#returnPeriodRange')\n// Процентная ставка.\nconst percentNumber = document.querySelector('#percentNumber')\nconst percentNumberRange = document.querySelector('#percentNumberText')\n\n// Форматтер числа - Встроенный объект Intl с параметрами форматирования данных.\nconst formatterNumber = new Intl.NumberFormat('ru')\n\n// Форматтер валюты.\nconst formatterCurrency = new Intl.NumberFormat('ru', {\n\tstyle: 'currency',\n\tcurrency: 'RUB',\n\t// максимальное количество знаков после запятой\n\tminimumFractionDigits: 0\n})\n\n// Форматтер даты.\nconst formatterDate = {\n\tformat (years) {\n\t\tyears = parseInt(years)\n\t\tlet count = years % 10\n\t\tlet txt = 'лет'\n\n\t\tif (years >= 5 && years <= 20) {\n\t\t\ttxt = 'лет'\n\t\t} else {\n\t\t\tif (count === 1) {\n\t\t\t\ttxt = 'год'\n\t\t\t} else {\n\t\t\t\tif (count >= 2 && count <= 4) {\n\t\t\t\t\ttxt = 'года'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn years + ' ' + txt\n\t}\n}\n\n// Форматтер процентов.\nconst formatterPercent = {\n\tformat (percent) {\n\t\tpercent = Number(parseFloat(percent).toFixed(2))\n\n\t\treturn `${percent} %`\n\t}\n}\n\n/*\n\tПорядок событий:\n\tfocus -> keydown -> keypress -> input -> keyup\n*/\n// Событие \"input\" возникает при смене значения в поле <input>.\n\n// для инпута \"Стоимость недвижимости\"\nsetDoubleDependencies(\n\tcreditText,\n\tcreditRange,\n\tformatterNumber,\n\tformatterCurrency,\n\tCREDIT_MIN,\n\tCREDIT_MAX,\n\tCREDIT_DEFAULT,\n)\n\n// для инпута \"Первоначальный взнос\"\nsetDoubleDependencies(\n\tfirstContributionText,\n\tfirstContributionRange,\n\tformatterNumber,\n\tformatterCurrency,\n\tCONTRIBUTION_MIN,\n\tCONTRIBUTION_MAX,\n\tCONTRIBUTION_DEFAULT,\n)\n\n// для инпута \"Срок кредита\"\nsetDoubleDependencies(\n\treturnPeriodText,\n\treturnPeriodRange,\n\tformatterNumber,\n\tformatterDate,\n\tRETURN_PERIOD_MIN,\n\tRETURN_PERIOD_MAX,\n\tRETURN_PERIOD_DEFAULT,\n)\n\n// для инпута \"Процентная ставка\"\nsetDoubleDependencies(\n\tpercentNumber,\n\tformatterNumber,\n\tformatterPercent,\n\tPERCENT_NUMBER_MIN,\n\tPERCENT_NUMBER_MAX,\n\tPERCENT_NUMBER_DEFAULT,\n)\n\nsetReaction(\n\tcreditText,\n\tcreditRange,\n\tfirstContributionText,\n\tfirstContributionRange,\n\treturnPeriodText,\n\treturnPeriodRange,\n\tpercentNumber,\n\tmainProcess\n)\n\nmainProcess()\n\n/*\n\tФункция принимает аргументы\n\t(над какими элементами будет двойная зависимость,\n\tФорматтер который определяет какой будет формат,\n\tЦелевой форматтер,\n\tминимальное и максимальное значения инпута)\n*/\nfunction setDoubleDependencies (\n\ttextElement,\n\trangeElement,\n\tformatterNumber,\n\tformatterGoal,\n\tmin,\n\tmax,\n\tmiddle\n) {\n\t// Среднее арифметическое min и max значений input'ов.\n\t// const middle = (min + max) / 2\n\n\t// Установить атрибуты min и max ползункам:\n\trangeElement.setAttribute('min', min)\n\trangeElement.setAttribute('max', max)\n\t// Установить значение ползунка по умолчанию:\n\trangeElement.value = middle\n\t// Установить значение input'а по умолчанию:\n\ttextElement.value = formatterGoal.format(middle)\n\n\t// Добавить обработчик события \"focus\" инпуту.\n\ttextElement.addEventListener('focus', function (event) {\n\t\t/*\n\t\t\tthis - контекст. Ссылается на тот самый элемент,\n\t\t\tвнутри которого произошло событие.\n\t\t*/\n\t\t// Достать из строки только числа:\n\t\tlet number = ''\n\n\t\tfor (const letter of this.value) {\n\t\t\tif ('0123456789.,'.includes(letter)) {\n\t\t\t\tnumber += letter\n\t\t\t}\n\t\t}\n\n\t\t// Превратить строку number в число.\n\t\tnumber = Number(parseFloat(number).toFixed(2))\n\n\t\t// value хранит в себе значение input'а.\n\t\t// Установить значением текущего элемента только число (без знака валюты).\n\t\tthis.value = formatterNumber.format(number)\n\t})\n\n\t// Добавить обработчик события \"input\" инпуту.\n\ttextElement.addEventListener('input', function inputHandler (event) {\n\t\t/*\n\t\t\tthis - контекст. Ссылается на тот самый элемент,\n\t\t\tвнутри которого произошло событие.\n\t\t*/\n\t\t// value хранит в себе значение input'а.\n\n\t\t// Достать из строки только числа:\n\t\tlet number = ''\n\n\t\tfor (const letter of this.value) {\n\t\t\tif ('0123456789.,'.includes(letter)) {\n\t\t\t\tnumber += letter\n\t\t\t}\n\t\t}\n\n\t\t// Превратить строку number в число.\n\t\tnumber = Number(parseFloat(number).toFixed(2))\n\n\t\t/*\n\t\t\tЗначение поля должно быть не менее минимального\n\t\t\tи не более максимально возможного.\n\t\t*/\n\t\tif (number < min) {\n\t\t\tnumber = min\n\t\t}\n\n\t\tif (number > max) {\n\t\t\tnumber = max\n\t\t}\n\n\t\t/*\n\t\t\tДобавить изменение значения ползунка\n\t\t\tпри изменении значения выбранного элемента.\n\t\t*/\n\t\trangeElement.value = number\n\n\t\tnumber = formatterNumber.format(number)\n\t\t// Записать в input отформатированное число.\n\t\tthis.value = number\n\t})\n\n\t// Добавить обработчик события \"blur\" инпуту.\n\ttextElement.addEventListener('blur', function (event) {\n\t\t/*\n\t\t\tthis - контекст. Ссылается на тот самый элемент,\n\t\t\tвнутри которого произошло событие.\n\t\t*/\n\t\t// Достать из строки только числа:\n\t\tlet number = ''\n\n\t\tfor (const letter of this.value) {\n\t\t\tif ('0123456789.,'.includes(letter)) {\n\t\t\t\tnumber += letter\n\t\t\t}\n\t\t}\n\t\tnumber = number.replace(',', '.')\n\n\t\t// Превратить строку number в число.\n\t\tnumber = Number(parseFloat(number).toFixed(2))\n\n\t\t// value хранит в себе значение input'а.\n\t\tthis.value = formatterGoal.format(number)\n\t})\n\n\t// Добавить обработчик события \"input\" инпуту-ползунку.\n\trangeElement.addEventListener('input', function (event) {\n\t\t// Присвоим значение ползунка инпуту.\n\t\ttextElement.value = formatterGoal\n\t\t\t.format(Number(parseFloat(this.value).toFixed(2)))\n\t})\n}\n\n/*\n\tФункция присвоит обработчик события нескольким элементам сразу.\n\tОбработчик события передаётся последним аргументом.\n*/\nfunction setReaction (...args) {\n\tconst handler = args.splice(-1)[0]\n\t/*\n\t\tПройти по всем элементам массива args\n\t\tи повесить им на событие 'input' обработчик handler.\n\t*/\n\tfor (const element of args) {\n\t\telement.addEventListener('input', function (event) {\n\t\t\thandler.call(this, event, args.slice())\n\t\t})\n\t}\n}\n\n// Функция рассчитывает суммы выплат.\nfunction mainProcess () {\n\tconst credit = parseInt(creditRange.value)\n\tconst firstContribution = parseInt(firstContributionRange.value)\n\tconst returnPeriod = parseInt(returnPeriodRange.value) * 12\n\tconst percent = Number(parseFloat(percentNumberRange.value)\n\t\t.toFixed(2)) / 100 / 12\n\n\t// Рассчитать и присвоить значение элементу \"Итого: в месяц\".\n\tconst x = Math.pow(1 + percent, returnPeriod)\n\tconst payment = ((credit - firstContribution) * x * percent) / (x - 1)\n\tdocument.querySelector('#payment')\n\t\t.textContent = formatterCurrency.format(payment)\n\n\t// Рассчитать и присвоить значение элементу \"Общая выплата\".\n\tconst common = (payment * returnPeriod).toFixed(2)\n\tdocument.querySelector('#common')\n\t\t.textContent = formatterCurrency.format(common)\n\n\t// Рассчитать и присвоить значение элементу \"Переплата\".\n\tconst subpayment = common - (credit - firstContribution)\n\tdocument.querySelector('#subpayment')\n\t\t.textContent = formatterCurrency.format(subpayment)\n\n\t// Finally, chart loan balance, and interest and equity payments\n\tchart(credit - firstContribution, percent, payment, returnPeriod)\n}\n\n// Chart monthly loan balance, interest and equity in an HTML <canvas> element.\n// If called with no arguments then just erase any previously drawn chart.\nfunction chart(principal, interest, monthly, payments) {\n\tconst graph = document.getElementById(\"graph\"); // Get the <canvas> tag\n\tgraph.width = graph.width;  // Magic to clear and reset the canvas element\n\n\t// If we're called with no arguments, or if this browser does not support\n\t// graphics in a <canvas> element, then just return now.\n\tif (arguments.length === 0 || !graph.getContext) return;\n\n\t// Get the \"context\" object for the <canvas> that defines the drawing API\n\tconst g = graph.getContext(\"2d\"); // All drawing is done with this object\n\tconst width = graph.width, height = graph.height; // Get canvas size\n\n\t// These functions convert payment numbers and dollar amounts to pixels\n\tfunction paymentToX(n) { return n * width/payments; }\n\tfunction amountToY(a) { return height-(a * height/(monthly*payments*1.05));}\n\n\t// Payments are a straight line from (0,0) to (payments, monthly*payments)\n\tg.moveTo(paymentToX(0), amountToY(0));         // Start at lower left\n\tg.lineTo(paymentToX(payments),                 // Draw to upper right\n\t\t\t amountToY(monthly*payments));\n\tg.lineTo(paymentToX(payments), amountToY(0));  // Down to lower right\n\tg.closePath();                                 // And back to start\n\tg.fillStyle = \"#f88\";                          // Light red\n\tg.fill();                                      // Fill the triangle\n\tg.font = \"bold 12px sans-serif\";               // Define a font\n\tg.fillText(\"Общая выплата\", 20,20);  // Draw text in legend\n\n\t// Cumulative equity is non-linear and trickier to chart\n\tlet equity = 0;\n\tg.beginPath();                                 // Begin a new shape\n\tg.moveTo(paymentToX(0), amountToY(0));         // starting at lower-left\n\tfor(let p = 1; p <= payments; p++) {\n\t\t// For each payment, figure out how much is interest\n\t\tconst thisMonthsInterest = (principal-equity)*interest;\n\t\tequity += (monthly - thisMonthsInterest);  // The rest goes to equity\n\t\tg.lineTo(paymentToX(p),amountToY(equity)); // Line to this point\n\t}\n\tg.lineTo(paymentToX(payments), amountToY(0));  // Line back to X axis\n\tg.closePath();                                 // And back to start point\n\tg.fillStyle = \"green\";                         // Now use green paint\n\tg.fill();                                      // And fill area under curve\n\tg.fillText(\"Сумма кредита\", 20,35);             // Label it in green\n\n\t// Loop again, as above, but chart loan balance as a thick black line\n\tlet bal = principal;\n\tg.beginPath();\n\tg.moveTo(paymentToX(0),amountToY(bal));\n\tfor(let p = 1; p <= payments; p++) {\n\t\tconst thisMonthsInterest = bal*interest;\n\t\tbal -= (monthly - thisMonthsInterest);     // The rest goes to equity\n\t\tg.lineTo(paymentToX(p),amountToY(bal));    // Draw line to this point\n\t}\n\tg.lineWidth = 3;                               // Use a thick line\n\tg.stroke();                                    // Draw the balance curve\n\tg.fillStyle = \"black\";                         // Switch to black text\n\tg.fillText(\"Остаток кредита\", 20,50);             // Legend entry\n\n\t// Now make yearly tick marks and year numbers on X axis\n\tg.textAlign=\"center\";                          // Center text over ticks\n\tconst y = amountToY(0);                          // Y coordinate of X axis\n\tfor(let year=1; year*12 <= payments; year++) { // For each year\n\t\tconst x = paymentToX(year*12);               // Compute tick position\n\t\tg.fillRect(x-0.5,y-3,1,3);                 // Draw the tick\n\t\tif (year === 1) g.fillText(\"Year\", x, y-5); // Label the axis\n\t\tif (year % 5 === 0 && year*12 !== payments) // Number every 5 years\n\t\t\tg.fillText(String(year), x, y-5);\n\t}\n\n\t// Mark payment amounts along the right edge\n\tg.textAlign = \"right\";                         // Right-justify text\n\tg.textBaseline = \"middle\";                     // Center it vertically\n\tconst ticks = [monthly*payments, principal];     // The two points we'll mark\n\tconst rightEdge = paymentToX(payments);          // X coordinate of Y axis\n\tfor(let i = 0; i < ticks.length; i++) {        // For each of the 2 points\n\t\tconst y = amountToY(ticks[i]);               // Compute Y position of tick\n\t\tg.fillRect(rightEdge-3, y-0.5, 3,1);       // Draw the tick mark\n\t\tg.fillText(String(ticks[i].toFixed(0)),    // And label it.\n\t\t\t\t\trightEdge-5, y);\n\t}\n}\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}